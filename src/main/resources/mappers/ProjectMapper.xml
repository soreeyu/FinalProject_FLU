<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="ProjectMapper">
  
  <!-- 검색도 넣기 -->
  
 <sql id="search">

  <if test="project.detailCategory != null">
    detailCategory=#{project.detailCategory} 
 </if>  
   name like '%' || #{listInfo.search} || '%' or  contents like '%' || #{listInfo.search} || '%'
 </sql>
 


   <!-- '%' || #{find} || '%' 이게 싫으면 넘어올때 앞뒤로%를 붙여서 넘겨준다 -->
  <!-- where가 들어가는 상황이면 where가 추가되고, and가 나올상황이면 알아서 지워주는 where태그  -->
  <!-- 불필요한 ,(콤마)를 삭제해주는 <set>태그  -->
  
  
  
  
  <select id="count" parameterType="java.util.HashMap" resultType="int">
     select count(nvl(projectNum,0)) from project
    where state='done' and
   (name like '%' || #{listInfo.search} || '%' or  contents like '%' || #{listInfo.search} || '%')
   <if test="result == 1">
       and detailCategory IN 
       <foreach collection="array" item="c" open="(" close=")" separator=",">
          #{c}
       </foreach>
      </if>   
  
  </select>
  
   
      
     
     <select id="list" parameterType="java.util.HashMap" resultType="com.flu.project.ProjectDTO">


       select * from 
      (select rownum R, N.* from 
      (select * from project 
      
      where state='done' and
      (name like '%' || #{listInfo.search} || '%' or  contents like '%' || #{listInfo.search} || '%')
      <if test="Cate == 1">
      and category IN
      <foreach collection="aray" item="a" open="(" close=")" separator=",">
      	#{a}
      </foreach>
      </if>
      <if test="result == 1">
       and detailCategory IN 
       <foreach collection="array" item="c" open="(" close=")" separator=",">
          #{c}
       </foreach>
      </if>
         
      order by
      <choose>
         <when test="arrange=='money'">
         budget desc
         </when>
         <when test="arrange=='lowmoney'">
         budget asc
         </when>
         <when test="arrange=='current'">
         reg_date desc
         </when>
         <when test="arrange=='last'">
         finishDate asc
         </when>
         <otherwise>
         projectNum desc
         </otherwise>
      </choose>

        ) N) where R between #{listInfo.startRow} and #{listInfo.lastRow}

     </select>
     
     
     
     
     <!-- List에서 뿌려주는 총 recruit 프로젝트 갯수 -->
     <select id="projectcount" parameterType="com.flu.project.ProjectDTO" resultType="int">

     	select count(nvl(projectNum, 0)) from project where state='done'

     </select>
     
     
	<!-- List에서 뿌려주는 급구 리스트들 --> 
	<select id="quickList" parameterType="com.flu.util.ListInfo" resultType="com.flu.project.ProjectDTO">
	select * from project where quick=1 and state='done'
	</select>     
	
	<!-- List에서 뿌려주는 급구 리스트 카운트 -->
	<select id="quickCount" parameterType="com.flu.util.ListInfo" resultType="int">
		select count(nvl(projectNum,0)) from project where quick=1 and state='done'
	</select>



  <!-- client페이지에서 보여지는 state에 따른 리스트들 -->
    <select id="clientcount" parameterType="java.util.HashMap" resultType="int">
       select count(nvl(projectNum,0)) from project where email=#{member.email} and state=#{project.state} 
    </select>
    
    
     <select id="clientpjlist" parameterType="java.util.HashMap" resultType="com.flu.project.ProjectDTO">
     select * from 
     (select rownum R, P.* from 
     (select * from project where email=#{member.email} and state=#{project.state} order by projectNum desc ) P) 
     where R between #{listInfo.startRow} and #{listInfo.lastRow}
     </select>

	<!-- 지원자 리스트 -->
	<select id="applicantList" parameterType="java.util.HashMap" resultType="com.flu.applicant.ApplicantDTO">
		select a.* from applicant a inner join project p on a.projectnum = p.projectnum 
			
			<if test="length != 0">
			<where>
	  			a.projectnum in 
	  			<foreach collection="projectNumList" item="item" open="(" separator="," close=")">
	  			#{item.projectNum}
	  			</foreach>
	  		</where>
			</if>
			<if test="length == 0">
				where a.projectnum = 0
			</if>
			
			
  			
	</select>
	
	<!-- 선택한 지원자의 지원한 프로젝트에서 이메일 리스트가져오기 -->
	<select id="applicantEmailList" parameterType="java.lang.Integer" resultType="java.lang.String">
		select email from applicant where projectnum = #{projectNum}
	</select>
	
	<!-- 선택받은 놈 업데이트 시켜주기 -->
	<update id="applicantUpdateMeet" parameterType="java.util.Map">
		update applicant set state='meet' where projectnum=#{projectNum} and email in 
		<foreach collection="emailList" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	<!-- 선택한 프로젝트 상태 업데이트 -->
	<update id="projectUpdateRecruit" parameterType="java.lang.Integer">
		update project set state='recruit' where projectnum =#{projectNum}
	</update>
	
	<!-- 지원자 계약금과 상태 업데이트 -->
	<update id="applicantUpdateIng" parameterType="java.util.Map">
		update applicant set state='ing' , pay = #{pay} where projectnum=#{dto.projectNum} and email =#{email}
		
	</update>
	<!-- 계약완료된 프로젝트 업데이트 -->
	<update id="projectUpdateIng" parameterType="com.flu.project.ProjectDTO">
		update project set state='wait' , startdate=#{startDate} , finishdate =#{finishDate} , budget=${budget} where projectnum=#{projectNum}
	</update>
	<!-- meet인 지원자 리스트 -->
	<select id="meetList" parameterType="java.lang.Integer" resultType="java.lang.String">
		select email from applicant where projectNum = #{projectNum}
	</select>


<!-- View에서 뿌려질 해당 프로젝트를 등록한 클라이언트에 대한 갯수들 -->
<select id="pjcount" parameterType="com.flu.project.ProjectDTO" resultType="int">
   select count(nvl(projectNum,0)) from project where email=#{email}
</select>
<select id="sellingCount" parameterType="com.flu.project.ProjectDTO" resultType="int">
   select count(nvl(projectNum,0)) from project where email=#{email} and state='sell'
</select> 
<select id="ingcount"  parameterType="com.flu.project.ProjectDTO" resultType="int">
   select count(nvl(projectNum,0)) from project where email=#{email} and state='ing'
</select>
<select id="finishcount"  parameterType="com.flu.project.ProjectDTO" resultType="int">
   select count(nvl(projectNum,0)) from project where email=#{email} and state='finish'
</select>
<select id="projectClient" parameterType="com.flu.project.ProjectDTO" resultType="com.flu.member.MemberDTO">
	select * from member where email=#{email}
</select>
 
 
 <!-- 판매중인 디자인 혹은 개발 리스트 보기 -->
 <select id="sellList" parameterType="java.util.HashMap" resultType="com.flu.project.ProjectDTO">
    select * from project where state=#{project.state} and category=#{project.category} order by projectNum desc
 </select>
<select id="sellCount" parameterType="com.flu.project.ProjectDTO" resultType="int">
   select count(nvl(projectNum, 0)) from project where state='sell' and category=#{category}
</select>
  
  
  
  
  
  <insert id="insert" parameterType="com.flu.project.ProjectDTO">
     insert into project (projectNum, category, detailCategory, name, period, startDate, budget, planState, contents, skill, finishDate, 
     meetKind, exp, state, email, quick, fName, oName, addr_num, addr_main, addr_detail, reg_date, del_check) 
     values (project_seq.nextval, #{category}, #{detailCategory}, #{name}, #{period}, #{startDate}, #{budget}, #{planState}, #{contents}, #{skill}, 
     #{finishDate}, #{meetKind}, #{exp}, #{state}, #{email}, #{quick}, #{fName}, #{oName}, #{addr_num}, #{addr_main}, #{addr_detail}, sysdate, #{del_check})
  </insert>
  
  
  <select id="view" parameterType="java.lang.Integer" resultType="com.flu.project.ProjectDTO">
     select * from project where projectNum=#{projectNum}
  </select>
  
  
  <!-- email은 변경불가 -->
  <update id="update" parameterType="com.flu.project.ProjectDTO">
     update project set category=#{category}, detailCategory=#{detailCategory}, name=#{name}, period=#{period}, startDate=#{startDate}, budget=#{budget},
     planState=#{planState}, contents=#{contents}, skill=#{skill}, finishDate=#{finishDate}, meetKind=#{meetKind}, exp=#{exp}, state=#{state},
     quick=#{quick}, fName=#{fName}, oName=#{oName}, addr_num=#{addr_num}, addr_main=#{addr_main}, addr_detail=#{addr_detail} 
     where projectNum=#{projectNum}
  </update>
  
  
  <delete id="delete" parameterType="java.lang.Integer">
     delete project where projectNum=#{projectNum}
  </delete>
  
  <update id="moreDateUpdate" parameterType="com.flu.project.ProjectDTO">
  		update project set startDate=#{startDate}, finishDate=#{finishDate},state='done' where projectNum=#{projectNum}
  </update>
  

  <!-- 프로젝트 판매를 등록 -->
  <insert id="insertSellProject" parameterType="com.flu.project.sell.PjSellDTO">
   	insert into pjsell (projectNum, name, price, contents, email) 
   	values (#{projectNum}, #{name}, #{price}, #{contents}, #{email})
  </insert>
 
<!-- 프로젝트 판매 등록하면 project의 상태도 sell로 바뀜 -->  
<update id="updateProjectState" parameterType="com.flu.project.sell.PjSellDTO" >
	update project set state='sell' where projectNum=#{projectNum}
</update>
  
  <!-- 판매인 프로젝트인지 확인하기 -->
  <select id="checkSellProject" parameterType="com.flu.project.sell.PjSellDTO" resultType="int">
  select count(nvl(projectNum,0)) from pjsell where projectNum=#{projectNum}
  </select>
  
  
  <!-- 프로젝트 판매 취소하면 pjsell에서 삭제됨 -->
  <delete id="deleteSellProject" parameterType="int">
  	delete pjsell where projectNum=#{projectNum}
  </delete>
  
  <!-- 프로젝트 판매 취소하면 project의 상태를 다시 finish로 바꿈 -->  
<update id="cancleProjectState" parameterType="com.flu.project.sell.PjSellDTO" >
	update project set state='finish' where projectNum=#{projectNum}
</update>


<!-- cancel Update -->

<!-- 프로젝트 판매 pjsell에서 Num으로 데이터 가져오기 -->
<select id="pjsellInfo" parameterType="int" resultType="com.flu.project.sell.PjSellDTO">
	select * from pjsell where projectNum=#{projectNum}
</select>

  

  <!-- index에 뿌려질 등록된 프로젝트의 금액 -->
  <select id="totalBudget" resultType="java.lang.Integer">
  	select nvl(sum(budget), 0) from project
  </select>
  
  <!-- index에 뿌려질 등록된 프로젝트 리스트 ( 높은 금액순 ) 6개-->
  <select id="indexProjectList" resultType="com.flu.project.ProjectDTO"> 
  	select * from project order by budget desc
  </select>

  
  <!-- 클라이언트가 완료 눌렀을 때, 프로젝트 state를 finish로 변환  -->
  <update id="updateState" parameterType="com.flu.project.ProjectDTO">
  	update project set state='finish' where projectNum=#{projectNum}
  </update>
  


<!-- cancel Update -->

<update id="projectCancelUpdate" parameterType="com.flu.project.ProjectDTO" >
	update project set del_check=1 where projectNum=#{projectNum}
</update>

<!-- 채팅방 형성을 위한 ing방 갯수 구해오기 -->
 <select id="roomCount" resultType="com.flu.project.ProjectDTO">
 	select * from project where state='ing' and del_check in(0,1)
 </select>


  </mapper>
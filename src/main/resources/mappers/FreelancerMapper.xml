<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="FreelancerMapper">
  		
  		 <sql id="search">
 			where j.intro like '%' || #{search } || '%' or j.INTERESTING like '%' || #{search} || '%' or j.nickname like '%' || #{search} || '%' 
 		</sql>
 		<sql id="list">
 			<foreach collection="email" item="item" open="(" separator="," close=")">
  					#{item}
  				</foreach>
 		</sql>
  		
  		<!-- 프리랜서 계정 정보 -->
  		<select id="memberView" resultType="com.flu.member.MemberDTO" parameterType="java.lang.String">
  			select * from member where email = #{email}
  		</select>
  		
  		<!-- 프리랜서 생성 -->
  		<insert id="freelancerInsert" parameterType="java.lang.String">
  			insert into freelancer values(#{email},null,null,null,null)
  		</insert>
  		
  		<!-- 프리랜서가 없을 때 자기소개 등록-->
  		<insert id="introInsert" parameterType="com.flu.freelancer.FreelancerDTO">
  			insert into freelancer values(#{email},null,null,null,#{intro})
  		</insert>
  		<!-- 프리랜서가 있을 때 or 자기소개 수정 -->
  		<update id="introUpdate" parameterType="com.flu.freelancer.FreelancerDTO">
  			update freelancer set intro = #{intro} where email=#{email}
  		</update>
  		
  		<!-- 프리랜서가 없을 때 내정보 등록 -->
  		<insert id="infoInsert" parameterType="com.flu.freelancer.FreelancerDTO">
  			insert into freelancer values(#{email},#{jobKind},#{Interesting},#{possibility},null)
  		</insert>
  	
  		<!-- 프리랜서가 있을 때 내정보 등록, 내정보 수정 -->
  		<update id="infoUpdate" parameterType="com.flu.freelancer.FreelancerDTO">
  			update freelancer set jobkind = #{jobKind}, interesting = #{Interesting}, possibility=#{possibility} where email=#{email}
  		</update>
  		
  		<!-- 프리랜서 데이터 하나 가져오기 -->
  		<select id="freelancerView" resultType="com.flu.freelancer.FreelancerDTO" parameterType="java.lang.String">
  			select * from freelancer where email = #{email}
  		</select>
  		
  		<!-- 프리랜서 totalCount -->
  		<select id="freelancerCount" resultType="java.lang.Integer" parameterType="com.flu.util.ListInfo">
  			select count(nvl(m.email,0)) from 
  			(select j.email from 
  			(select f.email,f.intro,f.INTERESTING,m.nickname from freelancer f inner join member m on f.email = m.email where m.emailcheck = 1) j
  			  <include refid="search"/> 
  			 ) m
  		</select>
  		
  		
  		<!-- 프리랜서 리스트1 검색키워드별 email 가져오기 -->
  		<select id="freelancerList_email" resultType="java.lang.String" parameterType="com.flu.util.ListInfo">
  			select * from 
  			(select m.*, rownum R from 
  			(select j.email from 
  			(select f.email,f.intro,f.INTERESTING,m.nickname from freelancer f inner join member m on f.email = m.email where m.kind = 'freelancer' and m.emailcheck = 1 order by m.email asc) j  
			 <include refid="search"/>  
			) m) where R between #{startRow} and #{lastRow}
  		</select>
  		<!-- 프리랜서 리스트2 각 리스트 가져오기 -->
  		<select id="freelancerList_member" resultType="com.flu.member.MemberDTO" parameterType="java.lang.String">
  			select * from member where email = #{email}
  		</select>
  		<select id="freelancerList_freelancer" resultType="com.flu.freelancer.FreelancerDTO" parameterType="java.lang.String">
  			select * from freelancer where email = #{email}
  		</select>
  		<select id="freelancerList_evaluation" resultType="com.flu.profile.Evaluation" parameterType="java.lang.String">
  			select * from evaluation where toemail = #{email}
  		</select>
  		
  		<!-- 프리랜서 리스트 최적화  -->
  		<select id="freelancerList_member2" resultType="com.flu.member.MemberDTO" parameterType="java.util.Map">
  			select * from  member
  			<where>
  				email in
  				<include refid="list"></include>
  			</where>
  		</select>
  		
  		<select id="freelancerList_freelancer2" resultType="com.flu.freelancer.FreelancerDTO" parameterType="java.util.Map">
  			select m.*,f.jobkind,f.interesting,f.possibility,f.intro from member m inner join freelancer f on m.email = f.email 
  			<if test="length > 0">
  			<where>
  				m.email in
  				<include refid="list"></include>
  			</where>
  			</if>
  		</select>
  		
  		<select id="freelancerList_evaluation2" resultType="com.flu.profile.Evaluation" parameterType="java.util.Map">
  			select * from evaluation 
  			<where>
  				toeamil in
  				<include refid="list"></include>
  			</where>
  		</select>
  		
  		<select id="skillList2" resultType="com.flu.profile.Skill" parameterType="java.util.Map">
  			select * from skill 
  			<if test="length > 0">
  			<where>
  				email in
  				<include refid="list"></include>
  			</where>
  			</if>
  		</select>
  		
  		<!-- 내가 참여한 프로젝트 갯수 -->
  		<select id="myprojectList2" parameterType="java.util.Map" resultType="com.flu.project.ProjectDTO">
  			select email,count(*) as appcount from applicant
  			<if test="length > 0">
  			  <where>
  				email in
  				<include refid="list"></include>
  			</where>
  			</if>
  			group by email 
  		</select>
  		
  		<!-- 내 포트폴리오 갯수  -->
  		<select id="myportfolioList2" parameterType="java.util.Map" resultType="com.flu.profile.PortFolio">
  			select email,count(*) as pfnum from PORTFOLIO 
  			<if test="length > 0">
  			<where> 
  			email in
  			<include refid="list"></include>
  			</where>
  			</if>
  			 group by email 
  		</select>
  		
  		<!--모든 평가리스트 -->
  		<select id="evalList2" parameterType="java.util.Map" resultType="com.flu.profile.Evaluation">
  			select * from evaluation
  			<if test="length > 0">
  			<where>
  				toemail in
  				<include refid="list"></include>
  			</where>
  			</if>
  		</select>
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡPortFolioㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		
  		<!-- 포트폴리오 등록 -->
  		<insert id="portfolioInsert" parameterType="com.flu.profile.PortFolio">
  			insert into portfolio values(#{email},#{title},#{describe},#{startDate},#{finishDate},#{percentage},#{pfOname},#{pfFname},pf_seq.nextval)
  		</insert> 
  		<!-- 포트폴리오 리스트 -->
  		<select id="portfolioList" resultType="com.flu.profile.PortFolio" parameterType="java.lang.String">
  			select * from portfolio where email = #{email}
  		</select>
  		<!-- 포트폴리오 뷰 -->
  		<select id="portfolioView" resultType="com.flu.profile.PortFolio" parameterType="java.lang.Integer">
  			select * from portfolio where pfnum = #{pfNum}
  		</select>
  		<!-- 포트폴리오 수정 -->
  		<update id="portfolioUpdate" parameterType="com.flu.profile.PortFolio">
  			update portfolio set title = #{title} , describe = #{describe} , startdate = #{startDate} , finishdate = #{finishDate} , 
  			percentage = #{percentage}, pfoname=#{pfOname}, pffname = #{pfFname} where pfnum = #{pfNum}
  		</update>
  		
  		<!-- 포트폴리오 시퀀스 받아오기 -->
  		<select id="portfolioseq" resultType="java.lang.Integer" parameterType="java.lang.String">
  			select max(pfnum) from portfolio where email=#{email}
  		</select>
  		
  		<!-- 포트폴리오 이미지 등록 -->
  		<insert id="pf_imageInsert" parameterType="com.flu.profile.PortFolioImg">
  			insert into pf_images values(#{pfNum},#{Fimage},#{Oimage},#{arrage},#{contents})
  		</insert>
  		<!-- 포트폴리오 이미지 리스트 -->
  		<select id="pf_imageView" resultType="com.flu.profile.PortFolioImg" parameterType="java.lang.Integer">
  			select * from pf_images where pfnum = #{pfNum}
  		</select>
  		<!-- 포트폴리오 이미지 수정 -->
  		
  		<!-- 포트폴리오 이미지 삭제 -->
  		<delete id="pf_imageDelete" parameterType="java.lang.Integer">
  			delete pf_images where pfnum = #{pfNum}
  		</delete>
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡSkillㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  	
  		<!-- 기술 등록 -->
  		<insert id="skillInsert" parameterType="com.flu.profile.Skill">
  			insert into skill values(#{email},#{kind},#{slevel},#{exp})
  		</insert>
  		<!-- 기술 리스트 -->
  		<select id="skillList" resultType="com.flu.profile.Skill" parameterType="java.lang.String">
  			select * from skill where email = #{email}
  		</select>
  		<!-- 기술 뷰 -->
  		<select id="skillView" parameterType="com.flu.profile.Skill">
  			select * from skill where email = #{email} and kind = #{kind}
  		</select>
  		<!-- 기술 수정 -->
  		<!-- 기술 삭제 -->
  		<delete id="skillDelete" parameterType="java.lang.String">
  			delete skill where email = #{email}
  		</delete>
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡCarrerㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		<!-- 경력 등록 -->
  		<insert id="carrerInsert" parameterType="com.flu.profile.Carrer">
  			insert into carrer values(#{email},#{companyName},#{dept},#{position},#{hireDate},#{retireDate}, carrer_seq.nextval)
  		</insert>
  		
  		<!-- 경력 뷰 -->
  		<select id="carrerView" resultType="com.flu.profile.Carrer" parameterType="com.flu.profile.Carrer">
  			select * from carrer where email=#{email} and companyname = #{companyName}
  		</select>
  		
  		<!-- 경력 리스트 -->
  		<select id="carrerList" resultType="com.flu.profile.Carrer" parameterType="java.lang.String">
  			select * from carrer where email=#{email}
  		</select>
  		
  		<!-- 경력 수정 -->
  		<update id="carrerUpdate" parameterType="com.flu.profile.Carrer">
  			update carrer set companyname = #{companyName}, dept=#{dept},position=#{position},hiredate=#{hireDate}, retiredate=#{retireDate} where email=#{email}and num = #{num}
  		</update>
  		
  		<!-- 경력 삭제 -->
  		<delete id="carrerDelete" parameterType="com.flu.profile.Carrer">
  			delete carrer where email = #{email} and num=#{num}
  		</delete>
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡAcademicㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		<!-- 학력 등록 -->
  		<insert id="academicInsert" parameterType="com.flu.profile.Academic">
  			insert into academic values(#{email} , #{school}, #{state}, #{sName}, #{major}, #{entrance}, #{graduate}, academic_seq.nextval)
  		</insert>
  		
  		<!-- 학력 뷰 -->
  		<select id="academicView" resultType="com.flu.profile.Academic" parameterType="com.flu.profile.Academic">
  			select * from academic where email=#{email} and sname = #{sName}
  		</select>
  		
  		<!-- 학력 리스트 -->
  		<select id="academicList" resultType="com.flu.profile.Academic" parameterType="com.flu.profile.Academic">
  			select * from academic where email=#{email}
  		</select>
  		<!-- 학력 수정 -->
  		<update id="academicUpdate" parameterType="com.flu.profile.Academic">
  			update academic set school = #{school}, state = #{state}, sname = #{sName}, major = #{major}, entrance = #{entrance}, graduate = #{graduate} where email = #{email} and num = #{num}
  		</update>
  		<!-- 학력 삭제 -->
  		<delete id="academicDelete" parameterType="com.flu.profile.Academic">
  			delete academic where email = #{email} and num= #{num}
  		</delete>
  	
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡLicenseㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		<!-- 자격증 등록 -->
  		<insert id="licenseInsert" parameterType="com.flu.profile.License">
  			insert into license values(#{email} , #{lName}, #{agency}, #{publishDate}, #{seiralNum}, license_seq.nextval)
  		</insert>
  		
  		<!-- 자격증 뷰 -->
  		<select id="licenseView" resultType="com.flu.profile.License" parameterType="com.flu.profile.License">
  			select * from license where email=#{email} and lname = #{lName}
  		</select>
  		
  		<!-- 자격증 리스트 -->
  		<select id="licenseList" resultType="com.flu.profile.License" parameterType="com.flu.profile.License">
  			select * from license where email=#{email}
  		</select>
  		<!-- 자격증 수정 -->
  		<update id="licenseUpdate" parameterType="com.flu.profile.License">
  			update license set lname = #{lName}, agency = #{agency}, publishdate = #{publishDate}, seiralnum = #{seiralNum} where email = #{email} and num = #{num}
  		</update>
  		<!-- 자격증 삭제 -->
  		<delete id="licenseDelete" parameterType="com.flu.profile.License">
  			delete license where email = #{email} and num = #{num}
  		</delete>
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡmyProjectㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		<!-- 마이 프로젝트 갯수 -->
  		<select id="myproject" resultType="java.lang.String" parameterType="java.lang.String">
  			select projectnum from applicant where email = #{email}
  		</select>
  		
  		<!-- 내 프로젝트 -->
  		<select id="myprojectList" resultType="java.lang.String" parameterType="java.util.Map">
  			select category from project 
  			
  			<if test="length > 0">
  			<where>
  			projectnum in 
  			<foreach collection="projectNum" item="item" open="(" separator="," close=")">
  			#{item}
  			</foreach>
  			</where> 
  			</if>
  			<if test="length == 0">
  			<where>
  				projectnum = 0
  			</where>
  			</if>
  		</select>
  		
  		<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ Evaluation ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  		
  		<!-- 나에 대한 평가 점수 리스트 -->
  		<select id="evaluationList" resultType="com.flu.profile.Evaluation" parameterType="java.lang.String">
  			select * from evaluation where toemail = #{email}
  		</select>
  		
  		<!-- 프리랜서에 대한 평가 점수 뷰 -->
  		<select id="evaluationView1" resultType="com.flu.profile.Evaluation" parameterType="com.flu.profile.Evaluation">
  			select * from evaluation where projectnum = #{projectNum} and toemail = #{toEamil}
  		</select>
  		
  		<!-- 클라이언트에 대한 평가 점수 뷰 -->
  		
  		<!-- 평가한 프로젝트 뷰 -->
  		<select id="getProjectName" resultType="com.flu.project.ProjectDTO" parameterType="com.flu.profile.Evaluation">
  			select * from project p inner join evaluation e on p.projectnum = e.projectnum where e.toemail = #{toEmail} and e.projectnum = #{projectNum}
  		</select>
  		
  		
  		
  	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡProjectㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  
  	<!-- 프리랜서의 프로젝트관리에서 보여지는 전체&state에 따른 프로젝트 리스트들 가져오기 -->
  	<select id="project_list" parameterType="java.util.HashMap" resultType="com.flu.project.ProjectDTO">
  		select * from project where projectNum IN
  		 (select projectNum from applicant where email=#{member.email}
  		 <if test="applicant.state!=null">
  		 	and state=#{applicant.state}
  		 </if>
  		 )
  		 
  	</select>
  	
  	<select id="project_count" resultType="int" parameterType="com.flu.member.MemberDTO">
  		select count(nvl(projectNum, 0)) from applicant where email=#{member.email}
  		 <if test="applicant.state!=null">
  		 	and state=#{applicant.state}
  		 </if>
  	</select>
  	
  	
  	<!--  인덱스에서 뿌려질 프리랜서 리스트-->
  	<select id="indexFreelancerList" resultType="com.flu.freelancer.FreelancerDTO">
  		select M.email, M.nickname, F.jobkind, F.intro, F.possibility from member M, Freelancer F where M.kind='freelancer' and M.email=F.email and M.emailcheck='1'
  	</select>
  	
  	
  		
  </mapper>